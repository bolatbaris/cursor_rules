# Project Rules for [Your Project Name]

This .cursorrules file provides instructions for Cursor AI to tailor its behavior when working on this project. The project uses the following technologies:

- **Build Tool:** ViteJS
- **Language:** Typescript
- **Framework:** ReactJS
- **Styling:** Scss
- **State Management:** Zustand
- **Routing:** React Router
- **Testing:** Jest, Enzyme
- **Data Fetching:** Tanstack Query
- **Time Format** moment
- **package manager** yarn

## General Principles

- All code must be written in Typescript.
- Follow standard ReactJS best practices for component structure and lifecycle.
- Use Scss for all styling needs.
- Prefer functional components over class components.
- Use hooks for state management and side effects.

## Technologies

- **ViteJS:** Use ViteJS as the build tool for fast development and production builds.
- **Typescript:** Use Typescript with strict mode enabled. Avoid using `any` type; always specify types.
- **ReactJS:** Use ReactJS with functional components and hooks. Use `React.memo` for performance optimization when necessary.
- **Scss:** Use Scss for styling, with files named in kebab-case (e.g., `button.scss`). Import Scss files using `@import` or directly in components.
- **Zustand:** Use Zustand for global state management. Create stores for different parts of the application. Use the `useStore` hook to access state and actions.
- **React Router:** Use React Router for client-side routing. Define routes in a `routes.tsx` file or similar. Use `Navigate` and `Link` components for navigation.
- **Jest and Enzyme:** Write unit tests with Jest and component tests with Enzyme. Ensure that all components have corresponding tests.
- **Tanstack Query:** Use Tanstack Query for data fetching and caching. Use `useQuery` and `useMutation` hooks for API interactions.

## Coding Standards

- **Prettier**: All code must be formatted according to the rules defined in the project's `.prettierrc` file.
- **ESLint**: All code must comply with the ESLint rules defined in the `.eslintrc.json` file and must not contain any errors or warnings.
- **Strict Compliance**: Any warnings or errors from Prettier or ESLint are not acceptable. Suggested code must fully adhere to these standards.

### Variable and Function Naming

- Use camelCase for variable and function names.
- Use PascalCase for class names (though we prefer functional components).

## File Structure
The project follows a modular file structure under the `src/` directory. Below is the detailed organization:

### src/components
- Contains reusable UI components.
- Each component lives in its own directory (e.g., `button/`, `modal/`, `navbar/`).
- Structure for each component directory:
  - `<component>.tsx`: The React component implementation.
  - `<component>.module.scss`: SCSS styles scoped to the component.
  - `<component>.type.ts`: TypeScript types for props and interfaces.
  - `<component>.test.tsx`: Unit tests for the component (using Jest/Enzyme).
  - `index.ts`: Barrel file to export the component (e.g., `export * from './button';`).

### src/layouts
- Contains layout components (e.g., `sidebar/`).
- Follows the same structure as `src/components`:
  - `<layout>.tsx`: Layout component.
  - `<layout>.module.scss`: Scoped styles.
  - `<layout>.type.ts`: Type definitions.
  - `<layout>.test.tsx`: Tests.
  - `index.ts`: Barrel file.

### src/pages
- Organized by feature (e.g., `auth/`) with subdirectories for each page (e.g., `login/`, `register/`).
- Structure for each page:
  - `<page>.tsx`: Page component.
  - `<page>.module.scss`: Scoped styles.
  - `<page>.type.ts`: Type definitions.
  - `<page>.test.tsx`: Tests.
  - `index.ts`: Barrel file.

### src/store
- Contains Zustand stores for state management (e.g., `authStore/`, `userStore/`, `productStore/`).
- Structure for each store:
  - `<store>.ts`: Store logic and implementation.
  - `<store>.type.ts`: Type definitions for the store.
  - `<store>.test.ts`: Unit tests.
  - `index.ts`: Barrel file to export the store.
- Root `index.ts`: Exports all stores (e.g., `export * from './authStore';`).

### src/utils
- Contains utility functions (e.g., `validateEmail/`).
- Structure:
  - `<util>.ts`: Utility function implementation.
  - `<util>.type.ts`: Type definitions.
  - `<util>.test.ts`: Tests.

### src/models
- Contains TypeScript type definitions for requests, responses, and common models.
- Subdirectories:
  - `request/`: Request models (e.g., `authRequest.types.ts`, `userRequest.types.ts`).
  - `response/`: Response models (e.g., `authResponse.types.ts`, `userResponse.types.ts`).
  - `common/`: General types (e.g., `user.types.ts`, `apiResponse.types.ts`).

### src/styles
- Global SCSS files:
  - `globals.scss`: Global styles.
  - `variables.scss`: SCSS variables (e.g., colors, sizes).
  - `mixins.scss`: Reusable SCSS mixins.
  - `reset.scss`: CSS reset styles.

### Root Files
- `index.html`: HTML template for Vite.
- `package.json`: Project dependencies and scripts.
- `vite.config.ts`: Vite configuration.
- `tsconfig.json`: TypeScript configuration.

## Guidelines for Cursor AI

- **File Creation**: When generating new code, create new files according to the file structure described above.
  - For new components, create a new directory in `src/components/` with all required files (`<component>.tsx`, `<component>.module.scss`, `<component>.type.ts`, `<component>.test.tsx`, `index.ts`) and export the component via `index.ts`.
  - Similarly, for new pages, stores, utils, etc., follow the corresponding structure and naming conventions.
- **No Modifications**: Do not modify existing files unless necessary for integration (e.g., importing a new component into a page or adding a route).
- **TypeScript**: All new code must be written in TypeScript with appropriate type definitions.
- **React**: Use functional components with hooks instead of class components.
- **SCSS**: Use SCSS modules (`.module.scss`) for component-specific styles.
- **Testing**: Include test files for new components, stores, utils, etc., following the file structure (e.g., `<component>.test.tsx`).
- **Exporting**: Export new files properly using barrel files (`index.ts`) to facilitate imports elsewhere in the project.
- **Compliance**: Follow the naming conventions and coding standards specified above.
- **No Comments in Code**: As clearly stated in the `.cursorrules` file, Cursor AI will not add comments to the code. This keeps the code clean.
- **Documentation with JSDoc**: Documentation of code units such as functions and components is done in accordance with JSDoc standards. The examples above show how Cursor AI should follow a format.
 **Implementation**: By adding these rules to the `.cursorrules` file in the root directory of your project, you can ensure that Cursor AI follows these standards in its development.


## Naming Conventions
- **Directories**: Use kebab-case (e.g., `auth-store`, `validate-email`).
- **Files**: Use camelCase (e.g., `authStore.ts`, `validateEmail.ts`).
- **Components and Pages**: Name matches the directory (e.g., `button.tsx` in `button/`).

## Barrel Files (index.ts)
- Each directory with multiple files includes an `index.ts` that exports its contents.
- Example for `src/components/button/`:
  ```typescript
  export * from './button';

### Style Guide

- Use Scss for styling, following BEM naming conventions.
- Avoid inline styles.

## Typescript and ReactJS Integration

- Use Typescript interfaces for component props instead of `prop-types`.
- Ensure that all components are typed correctly.

## Testing

- Write unit tests for all components and functions.
- Use mocking for external dependencies.
- Ensure that tests are independent and do not share state.

## Additional Instructions

- When generating code, ensure it is compatible with the project's existing codebase.
- Follow the project's commit history and style.
- Provide clear and concise comments in the code.
